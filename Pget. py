import os
import requests
import threading

def download_part(url, start, end, output, index, results):
    headers = {'Range': f'bytes={start}-{end}'}
    response = requests.get(url, headers=headers, stream=True)  # Use requests.get() instead of head()
    results[index] = response.content
    with open(f"{output}.part{index}", "wb") as f:
        f.write(response.content)

def wget(url, output=None, threads=4):
    # Get the user's desktop path
    desktop = os.path.join(os.path.expanduser("~"), "Desktop")
    
    if output is None:
        output = os.path.join(desktop, url.split('/')[-1])  # Default to Desktop

    response = requests.get(url, stream=True)  # Use requests.get() to download the file
    total_size = int(response.headers.get('content-length', 0))
    part_size = total_size // threads

    results = [None] * threads
    threads_list = []

    for i in range(threads):
        start = i * part_size
        end = (i + 1) * part_size - 1 if i < threads - 1 else total_size - 1
        thread = threading.Thread(target=download_part, args=(url, start, end, output, i, results))
        threads_list.append(thread)
        thread.start()

    for thread in threads_list:
        thread.join()

    with open(output, "wb") as output_file:
        for i in range(threads):
            with open(f"{output}.part{i}", "rb") as part_file:
                output_file.write(part_file.read())
            os.remove(f"{output}.part{i}")

    print(f"Downloaded to: {output}")